cnf creates and loads configuration files.

``//__init__.py:
``import``
``const``
``makeload``
``cnfpath``
``MakeCnfException``
``

makeload reads the conf file from `path` rooted in `root`, creates if
from `make` string it's not there, and returns it parsed from a given
format.

it keeps the root part extra so it can be set with a constant like
`cnf.home`.

if no config file was there and it was created, a `MakeCnfException` is
thrown. 

``/makeload:
def makeload(path:str=None, root:str=None, fmt:str=None, make:str=None):
    ``.``
``

append root to the path.

``
    p = cnfpath(root, path)
``

if no settings, create stub settings file.

``
    if not os.path.exists(p):
        os.makedirs(os.path.dirname(p), exist_ok=True)
        with open(p, "w") as file:
            file.write(make)
            raise MakeCnfException(f"please edit {p}, then run again.")
            return None
``

else read the conf, parse it if format given.

``
    else:
        ``without open``
        ``with open``
``

configparser doesn't need an opened file, it reads a path.

``./without open:
        if fmt == "ini":
           config = configparser.ConfigParser()
           config.read(p)
           return config
``

read the other formats from opened file.

``../with open:
        else:
            with open(p, "r") as file:
                if fmt == None:
                   return file.read()
                elif fmt == "yaml":
                   return yaml.safe_load(file)
                elif fmt == "json":
                   return json.load(file)
                else:
                   print(f"{fmt} not known.")
                   return None
``

imports for makeload.

``/import:
import os
import yaml
import json
import configparser
``

cnfpath appends path to a cnf constant, root.

``/cnfpath:
def cnfpath(root, path):
    ``.``
``

get the root constant.

``
    frompath = ""
    if root == None:
        frompath = ""
    elif root == home:
        frompath = Path.home()
    else:
        print(f"error: {root} not known. ")
``

append path.

``
    return os.path.join(frompath, path)
``

imports for cnfpath.

``/import
from pathlib import Path
``

introduce the from constants.

``/const:
home = "home"
``

MakeCnfException is thrown when the config file was just created, for clients to
catch it, display it, and exit quietly.

``/MakeCnfException:
class MakeCnfException(Exception):
    def __init__(self, message:str):
        super().__init__(message)
``