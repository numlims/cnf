cnf creates and loads configuration files.

``//__init__.py:
``import``
``const``
``makeload``
``cnfpath``
``

makeload reads the conf file from `path` rooted in `root`, creates
it using `make` as template string if it's not there, and returns it
parsed from a given format.

it keeps the root part extra so it can be set with a constant like
`cnf.home`.

``/makeload:
def makeload(path:str, root:str=None, fmt:str=None, make:str=None):
    ``.``
``

append root to the path.

``
    p = cnfpath(root, path)
``

if no settings, create stub settings file.

``
    if not os.path.exists(p):
        with open(p, "w") as file:
            file.write(make)
            print(f"cnf: please edit {p}, then run again.")
            return None
``

else read the conf, parse it if format given.

``
    else:
        with open(cnfpath(), "r") as file:
            out = None
            if fmt == None:
               out = file.read()
            elif fmt == "yaml":
               out = yaml.safe_load(file)
            elif fmt == "json":
               out = json.load(file)
            elif fmt == "ini":
               config = configparser.ConfigParser()
               out = config.read(file)
            else:
                print(f"{fmt} not known.")
            return out
``

imports for makeload.

``/import:
import os
import yaml
import json
import configparser
``

cnfpath appends path to a cnf constant, root.

``/cnfpath:
def cnfpath(root, path):
    ``.``
``

get the root constant.

``
    frompath = ""
    if root == None:
        frompath = ""
    elif root == cnf.home:
        frompath = Path.home()
    else:
        print(f"error: {root} not known.")
``

append path.

``
    return frompath / path
``

imports for cnfpath.

``/import
from pathlib import Path
``

introduce the from constants.

``/const:
home = "home"
``